"use strict";
function _classCallCheck(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, t) {
  for (var n = 0; n < t.length; n++) {
    var o = t[n];
    (o.enumerable = o.enumerable || !1),
      (o.configurable = !0),
      "value" in o && (o.writable = !0),
      Object.defineProperty(e, o.key, o);
  }
}
function _createClass(e, t, n) {
  return (
    t && _defineProperties(e.prototype, t), n && _defineProperties(e, n), e
  );
}
function _defineProperty(e, t, n) {
  return (
    t in e
      ? Object.defineProperty(e, t, {
          value: n,
          enumerable: !0,
          configurable: !0,
          writable: !0,
        })
      : (e[t] = n),
    e
  );
}
/*!
 * IconicDropdown v0.1.0
 * Licence:  MIT
 * (c) 2021 Sidney Wimart.
 */ var arrowDown =
    '\n<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#656565" viewBox="0 0 960 560"  xml:space="preserve">\n    <g id="arrowDown">\n        <path d="M480,344.181L268.869,131.889c-15.756-15.859-41.3-15.859-57.054,0c-15.754,15.857-15.754,41.57,0,57.431l237.632,238.937   c8.395,8.451,19.562,12.254,30.553,11.698c10.993,0.556,22.159-3.247,30.555-11.698l237.631-238.937   c15.756-15.86,15.756-41.571,0-57.431s-41.299-15.859-57.051,0L480,344.181z"/>\n    </g>\n<script xmlns=""/></svg>\n',
  scrollIntoView = function (e, t) {
    var n = e.getBoundingClientRect(),
      o = t.getBoundingClientRect();
    n.top < o.bottom - t.offsetHeight ||
      (e.scrollTop = t.clientHeight + (t.offsetTop - t.offsetHeight)),
      n.bottom > o.top + t.offsetHeight ||
        (e.scrollTop =
          t.clientHeight +
          (t.offsetTop - t.offsetHeight) -
          (e.offsetHeight -
            (t.offsetHeight + (t.offsetHeight - t.clientHeight))));
  },
  IconicDropdown = (function () {
    function e(t) {
      var n = t.customCss,
        o = t.data,
        i = t.noData,
        s = t.noResults,
        r = t.placeholder,
        l = t.select,
        a = t.textField,
        d = t.valueField;
      _classCallCheck(this, e),
        _defineProperty(this, "customCss", void 0),
        _defineProperty(this, "data", void 0),
        _defineProperty(this, "domElements", void 0),
        _defineProperty(this, "event", function () {}),
        _defineProperty(this, "noResults", void 0),
        _defineProperty(this, "options", void 0),
        _defineProperty(this, "placeholder", void 0),
        _defineProperty(
          this,
          "prefix",
          "iconic" + Math.floor(1e3 + 9e3 * Math.random()) + "-"
        ),
        _defineProperty(this, "selectContainer", void 0),
        _defineProperty(this, "selected", void 0),
        _defineProperty(this, "textField", void 0),
        _defineProperty(this, "valueField", void 0),
        (this.customCss = n),
        (this.data = null != o ? o : []),
        (this.noData = null != i ? i : "No data."),
        (this.noResults = null != s ? s : "No results found."),
        (this.placeholder = null != r ? r : "Select..."),
        (this.selectContainer = document.querySelector(l)),
        (this.textField = null != a ? a : null),
        (this.valueField = null != d ? d : null);
    }
    return (
      _createClass(e, [
        {
          key: "init",
          value: function () {
            this.selectContainer &&
              "SELECT" === this.selectContainer.nodeName &&
              ((this.options =
                this._getDataFromSettings() || this._getDataFromSelectTag()),
              this._injectCss(),
              this._renderDropdown(),
              this._renderOptionsList(),
              (this.domElements = {
                arrow: document.querySelector(
                  ".".concat(this.prefix, "dropdown__arrow")
                ),
                options: document.querySelectorAll("li[data-value]"),
                optionsContainer: document.querySelector(
                  ".".concat(this.prefix, "dropdown__options")
                ),
                optionsList: document.querySelector(
                  ".".concat(this.prefix, "dropdown__options ul")
                ),
                input: document.querySelector(
                  ".".concat(this.prefix, "dropdown__input")
                ),
                text: document.querySelector(
                  ".".concat(this.prefix, "dropdown__text")
                ),
              }),
              this._enableEventListenners());
          },
        },
        {
          key: "subscribe",
          value: function (e) {
            if ("function" != typeof e)
              throw new Error(
                "parameter in the subscribe method is not a function"
              );
            this.event = e;
          },
        },
        {
          key: "_closeOptionsList",
          value: function () {
            document.activeElement.blur(),
              this._removeAllArrowSelected(),
              this.domElements.arrow.classList.remove("open"),
              this.selected && (this.domElements.input.placeholder = ""),
              (this.domElements.input.value = ""),
              this.domElements.optionsContainer.classList.remove("visible"),
              (this.domElements.text.style.visibility = "visible");
          },
        },
        {
          key: "_dispatchEvent",
          value: function (e) {
            this.event(e);
          },
        },
        {
          key: "_enableEventListenners",
          value: function () {
            var e = this;
            document.addEventListener("mouseup", function (t) {
              var n = t.target;
              document.getElementById("iconic7878-dropdown").contains(n) ||
                (e._filterOptions(""), e._closeOptionsList());
            });
            for (var t = 0; t < this.domElements.options.length; t++) {
              this.domElements.options[t].addEventListener(
                "click",
                function (t) {
                  var n = t.target;
                  e._handleOption(n),
                    e._filterOptions(""),
                    e._closeOptionsList();
                }
              );
            }
            this.domElements.arrow.addEventListener("click", function () {
              e._toggleArrowDirection(), e._toggleOptionsList();
            }),
              this.domElements.input.addEventListener("input", function (t) {
                var n = t.target.value;
                n.length > 0
                  ? (e.domElements.text.style.visibility = "hidden")
                  : (e.domElements.text.style.visibility = "visible"),
                  e._filterOptions(n);
              }),
              this.domElements.input.addEventListener("focus", function () {
                (e.domElements.input.placeholder = ""),
                  (e.domElements.text.style.opacity = "0.6"),
                  e.domElements.arrow.classList.add("open"),
                  e.domElements.optionsContainer.classList.add("visible");
              }),
              this.domElements.input.addEventListener("focusout", function () {
                (e.domElements.text.style.opacity = "1"),
                  e.selected ||
                    (e.domElements.input.placeholder = e.placeholder);
              }),
              this.domElements.input.addEventListener("keydown", function (t) {
                e._handleArrows(t), e._handleEnter(t);
              });
          },
        },
        {
          key: "_filterOptions",
          value: function (e) {
            var t =
                this.domElements.optionsContainer.classList.contains("visible"),
              n = e.toLowerCase(),
              o = !1;
            if (
              (!t &&
                e.length > 0 &&
                (this.domElements.optionsContainer.classList.add("visible"),
                this.domElements.arrow.classList.add("open")),
              this.domElements.options.length > 0)
            ) {
              for (var i = 0; i < this.domElements.options.length; i++) {
                var s = this.domElements.options[i];
                s.textContent.toLowerCase().substring(0, n.length) === n
                  ? this.domElements.optionsList.appendChild(s)
                  : s.parentNode && s.parentNode.removeChild(s);
              }
              for (var r = 0; r < this.domElements.options.length; r++) {
                if (
                  this.domElements.options[r].textContent
                    .toLowerCase()
                    .substring(0, n.length) === n
                ) {
                  o = !0;
                  break;
                }
              }
              this._showNoResults(!o);
            }
          },
        },
        {
          key: "_getDataFromSelectTag",
          value: function () {
            for (
              var e = [], t = this.selectContainer.options, n = 0;
              n < t.length;
              n++
            )
              e.push({ text: t[n].text, value: t[n].value });
            return e;
          },
        },
        {
          key: "_getDataFromSettings",
          value: function () {
            if (this.data.length > 0 && this.valueField && this.textField) {
              var e = "string" == typeof this.valueField,
                t = "string" == typeof this.textField,
                n = [];
              if (!e || !t)
                throw new Error(
                  "textField and valueField must be of type string"
                );
              for (var o = 0; o < this.data.length; o++) {
                var i = this.data[o];
                n.push({ value: i[this.valueField], text: i[this.textField] });
              }
              return n;
            }
            return null;
          },
        },
        {
          key: "_handleArrows",
          value: function (e) {
            if (40 === e.keyCode || 38 === e.keyCode) {
              var t =
                  this.domElements.optionsContainer.classList.contains(
                    "visible"
                  ),
                n = document.querySelector(
                  ".".concat(this.prefix + "dropdown__options > ul")
                );
              if (t) {
                var o = document.querySelector(
                    ".".concat(
                      this.prefix,
                      "dropdown__options ul li.arrow-selected"
                    )
                  ),
                  i = {
                    ArrowUp: "previous",
                    Up: "previous",
                    ArrowDown: "next",
                    Down: "next",
                  };
                if (!o)
                  return (
                    n.firstElementChild.classList.add("arrow-selected"),
                    void n.firstElementChild.scrollIntoView()
                  );
                if (
                  (o.classList.remove("arrow-selected"),
                  !(o = o[i[e.key] + "ElementSibling"]))
                )
                  return (
                    (o =
                      n.children[
                        "next" === i[e.key] ? 0 : n.children.length - 1
                      ]).classList.add("arrow-selected"),
                    void scrollIntoView(n, o)
                  );
                o.classList.add("arrow-selected"), scrollIntoView(n, o);
              } else
                this.domElements.optionsContainer.classList.add("visible"),
                  this.domElements.arrow.classList.add("open"),
                  n.firstElementChild.classList.add("arrow-selected"),
                  n.firstElementChild.scrollIntoView();
            }
          },
        },
        {
          key: "_handleEnter",
          value: function (e) {
            if (13 === e.keyCode) {
              var t = document.querySelector(
                ".".concat(
                  this.prefix,
                  "dropdown__options ul li.arrow-selected"
                )
              );
              t &&
                (this._handleOption(t),
                this._closeOptionsList(),
                this._filterOptions(""));
            }
          },
        },
        {
          key: "_handleOption",
          value: function (e) {
            for (var t = 0; t < this.domElements.options.length; t++) {
              var n = this.domElements.options[t];
              n === e
                ? (n.classList.add("selected"),
                  (this.selected = n),
                  (this.domElements.text.innerHTML = n.textContent),
                  this._dispatchEvent({
                    value: n.dataset.value,
                    text: n.textContent,
                  }))
                : n.classList.remove("selected");
            }
          },
        },
        {
          key: "_removeAllArrowSelected",
          value: function () {
            for (var e = 0; e < this.domElements.options.length; e++) {
              var t = this.domElements.options[e];
              t.classList.contains("arrow-selected") &&
                t.classList.remove("arrow-selected");
            }
          },
        },
        {
          key: "_renderDropdown",
          value: function () {
            this.selectContainer.style.display = "none";
            var e = '\n    <div id="iconic7878-dropdown" class="'
              .concat(
                this.prefix + "dropdown__container",
                '">\n      <input class="'
              )
              .concat(this.prefix + "dropdown__input", '" placeholder="')
              .concat(this.placeholder, '" />\n      <span class="')
              .concat(
                this.prefix + "dropdown__text",
                '"></span>\n      <span class="'
              )
              .concat(this.prefix + "dropdown__arrow", '">')
              .concat(arrowDown, "</span>\n    </div>\n  ");
            this.selectContainer.insertAdjacentHTML("afterend", e);
          },
        },
        {
          key: "_renderOptionsList",
          value: function () {
            var e = '\n        <div class="'
              .concat(
                this.prefix,
                'dropdown__options">\n            <ul>\n            '
              )
              .concat(
                this.options.length > 0
                  ? this.options
                      .map(function (e) {
                        return '\n                <li data-value="'
                          .concat(e.value, '">')
                          .concat(e.text, "</li>\n            ");
                      })
                      .join("")
                  : "",
                "\n            "
              )
              .concat(
                this._showNoData(0 === this.options.length),
                "\n            </ul>\n        </div>\n    "
              );
            document
              .querySelector(".".concat(this.prefix + "dropdown__container"))
              .insertAdjacentHTML("beforeend", e);
          },
        },
        {
          key: "_showNoData",
          value: function (e) {
            return e
              ? '<li class="'
                  .concat(this.prefix, 'dropdown__no-data">')
                  .concat(this.noData, "</li>")
              : "";
          },
        },
        {
          key: "_showNoResults",
          value: function (e) {
            var t = document.querySelector(
              ".".concat(this.prefix, "dropdown__filter-no-results")
            );
            if (e) {
              var n = '<li class="'
                .concat(this.prefix, 'dropdown__filter-no-results">')
                .concat(this.noResults, "</span>");
              !t &&
                this.domElements.optionsList.insertAdjacentHTML("beforeend", n);
            } else t && t.parentNode && t.parentNode.removeChild(t);
          },
        },
        {
          key: "_toggleArrowDirection",
          value: function () {
            this.domElements.arrow.classList.toggle("open");
          },
        },
        {
          key: "_toggleOptionsList",
          value: function () {
            this.domElements.optionsContainer.classList.toggle("visible");
          },
        },
        {
          key: "_injectCss",
          value: function () {
            var e = "\n    <style>\n    ."
              .concat(
                this.prefix,
                "dropdown__container {\n      -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n      background-color: #fff;\n      border-radius: 2px;\n      -webkit-box-shadow: 0 1px 3px 0 #d1d1d2, 0 0 0 1px #d1d1d2;\n              box-shadow: 0 1px 3px 0 #d1d1d2, 0 0 0 1px #d1d1d2;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      font-family: Arial,Helvetica,sans-serif;\n      height: 36px;\n      padding: 0 12px;\n      position: relative;\n      width: 354px;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__container:after {\n      content:'';\n      min-height:inherit;\n      font-size:0;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__container > * {\n      color: #656565;\n      font-size: 14px;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__arrow {\n      cursor: pointer;\n      margin-left: auto;\n      display: flex;\n      z-index: 2;\n      transition: transform 0.2s;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__arrow.open {\n      transform: rotate(-180deg);\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__arrow > svg {\n      width: 24px;\n      height: 100%;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__input {\n      height: 100%;\n      width: 100%;\n      padding: 0;\n      border: none;\n      outline: none;\n      background: transparent;\n      z-index: 2;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__text {\n      height: 100%;\n      width: 100%;\n      display: flex;\n      align-items: center;\n      position: absolute;\n      transform: translateY(-50%);\n      padding: 0 12px;\n      left: 0;\n      top: 50%;\n      z-index: 1;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__options {\n      background-color: #f6f6f6;\n      border-radius: 2px;\n      left: 0;\n      max-height: 0;\n      overflow: hidden;\n      position: absolute;\n      top: calc(100% + 3px);\n      width: 100%;\n      opacity: 0;\n      transition: max-height 0.1s ease;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__options.visible {\n      max-height: 128px;\n      -webkit-box-shadow: 0 1px 3px 0 #d1d1d2, 0 0 0 1px #d1d1d2;\n      box-shadow: 0 1px 3px 0 #d1d1d2, 0 0 0 1px #d1d1d2;\n      opacity: 1;\n      transition: max-height 0.2s ease;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__options ul {\n      list-style: none;\n      margin: 0;\n      padding: 2px 0;\n      max-height: 120px;\n      overflow: auto;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__options ul li {\n      cursor: pointer;\n      padding: 4px 8px;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__options ul li:hover {\n      background-color: #dedede;\n    }\n\n    ."
              )
              .concat(this.prefix, "dropdown__options ul li.")
              .concat(this.prefix, "dropdown__no-data, \n    .")
              .concat(this.prefix, "dropdown__options ul li.")
              .concat(
                this.prefix,
                "dropdown__filter-no-results {\n      cursor: default;\n      margin: 0;\n      padding: 8px;\n      text-align: center;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__options ul li.arrow-selected {\n      border: 2px solid rgba(101, 101, 101, 0.5);\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__options ul li.selected {\n      background-color: #ff6358;\n      color: #fff;\n    }\n\n    ."
              )
              .concat(
                this.prefix,
                "dropdown__options ul li.selected:hover {\n      background-color: #eb5b51;\n    }\n\n    ."
              )
              .concat(this.prefix, "dropdown__options ul li.")
              .concat(this.prefix, "dropdown__no-data:hover, \n    .")
              .concat(this.prefix, "dropdown__options ul li.")
              .concat(
                this.prefix,
                "dropdown__filter-no-results:hover {\n      background-color: inherit;\n    }\n    "
              );
            this.customCss ||
              document.querySelector("head").insertAdjacentHTML("beforeend", e),
              this.customCss && (this.prefix = "");
          },
        },
      ]),
      e
    );
  })();
